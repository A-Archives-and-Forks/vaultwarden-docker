#!/bin/bash

if [[ "${MAKE_IT_FAIL}" == "true" ]]; then
   echo "error: MAKE_IT_FAIL is defined, aborting..."
   echo "error: If you ready to check your environment variables for any configiration issues,"
   echo "error: either set it to 'false' or just remove it entirely on your SaaS provider's"
   echo "error: env vars settings page. Exiting..."
   exit
elif [[ "${MAKE_IT_FAIL}" == "false" ]]; then
    echo "==> Looks fine, starting up..."
else
    echo "==> MAKE_IT_FAIL var contains unsupported options, starting up..."
    echo "    Only true or false are supported. Leaving it blank is also fine."
fi
sleep 2

# Let Rocket bind the PORT defined on our Dockerfile
export ROCKET_PORT="${PORT}"

# While its possible to write stuff in the
# epherimal storage, we prefer to keep these
# disabled.
export ORG_ATTACHMENT_LIMIT=0
export USER_ATTACHMENT_LIMIT=0
# allow icons to be cached on our container
export DISABLE_ICON_DOWNLOAD=false
# Icon caches management
export ICON_CACHE_TTL=120
export ICON_CACHE_NEGTTL=0

# do some checks if its Divio or Railway
if [[ "${RAILWAY}" == "false" ]] || [[ "${RAILWAY}" == "" ]]; then
   DEPLOY_METHOD=divio
else
   DEPLOY_METHOD=railway
fi

if [[ "${ENABLE_ADMIN}" == "true" ]]; then
  echo "==> Enabling admin dashboard..."
  if [[ "${ADMIN_TOKEN}" == "" ]]; then
    echo "   No token found for the admin dashboard, unsetting..."
    unset ADMIN_TOKEN
  fi
else
  echo "==> Admin panel is disabled, removing ADMIN_TOKEN..."
  unset ADMIN_TOKEN
fi
echo
sleep 3

echo "==> Checking for RSA_CONTENT..."
sleep 3
if [ -z "${RSA_CONTENT}" ]; then
  echo "warn: RSA_CONTENT is missing, so you'll be logged out after leaving the web vault page."
  echo "warn: To remove this warning, please run './tools/generate-rsakey ${DEPLOY_METHOD}' on your machine" 
else
  echo "==> RSA_CONTENT found, attempting to decode..."
  echo "${RSA_CONTENT}" | base64 -d | tar zxf -
  if [[ $? == 0 ]]; then
     export RSA_KEY_FILENAME=${PWD}/rsa_key
  else
     echo "error: Failed to either decode base64 or untar decoded contents."
     echo "error: Run './tools/generate-rsakey ${DEPLOY_METHOD}' on your manchine"
     exit 1
  fi
fi
echo
sleep 3

# Do some checks if the database is there
if [[ "${DATABASE_URL}" == "" ]]; then
  echo "error: DATABASE_URL is undefined, thus the server will not start."
  echo "error: To continue, add an DATABASE_URL secret on your PaaS service."
  exit 1
fi

echo "==> Checks done, starting up..."
/bin/sh /start.sh
