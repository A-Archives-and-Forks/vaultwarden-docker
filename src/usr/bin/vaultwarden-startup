#!/bin/bash

if [[ "${MAKE_IT_FAIL}" == "true" ]]; then
   echo "error: MAKE_IT_FAIL is defined, aborting..."
   echo "error: If you ready to check your environment variables for any configiration issues,"
   echo "error: either set it to 'false' or just remove it entirely on your SaaS provider's"
   echo "error: env vars settings page. Exiting..."
   exit
fi
sleep 2

# Let Rocket bind the PORT defined on our Dockerfile
# TODO: Hardcode ROCKET_PORT for our proxy server (Caddy)
export ROCKET_PORT="${PORT:-"8080"}"

# While its possible to write stuff in the epherimal storage, we prefer to keep these disabled.
# We'll do some if-then statements if you configured these in the future.
export ORG_ATTACHMENT_LIMIT=${ORG_ATTACHMENT_LIMIT:-"0"}
export USER_ATTACHMENT_LIMIT=${USER_ATTACHMENT_LIMIT:-"0"}

# allow icons to be cached on our container in meanwhile
export DISABLE_ICON_DOWNLOAD=false

# Icon cache management
export ICON_CACHE_TTL=${ICON_CACHE_TTL:-"300"} ICON_CACHE_NEGTTL=${ICON_CACHE_NEGTTL:-"0"}

# Org event logs (upstream: https://bitwarden.com/help/event-logs/)
export ORG_EVENTS_ENABLED=true EVENTS_DAYS_RETAIN=${EVENTS_DAYS_RETAIN:-"90"}

# hold groups within orgs until future announcements
export ORG_GROUPS_ENABLED=${ORG_GROUPS_ENABLED:-"true"}

if [[ $CF_PROXY == true ]]; then
  export IP_HEADER=CF-Connecting-IP
else
  export IP_HEADER=${IP_HEADER:-"X-Forwarded-For"}
fi

if [[ "${ENABLE_ADMIN}" == "true" ]]; then
  echo "==> Enabling admin dashboard..."
  if [[ "${ADMIN_TOKEN}" == "" ]]; then
    echo "   No token found for the admin dashboard, unsetting..."
    unset ADMIN_TOKEN
  fi
else
  echo "==> Admin panel is disabled, removing ADMIN_TOKEN..."
  unset ADMIN_TOKEN
fi

echo "==> Checking for RSA_CONTENT..."
sleep 3
if [ -z "${RSA_CONTENT}" ]; then
  echo "warn: RSA_CONTENT is missing, so you'll be logged out after leaving the web vault page."
  echo "warn: To remove this warning, please run './tools/generate-rsakey ${DEPLOY_METHOD}' from"
  echo "warn: this Docker image's git sources"
else
  echo "info: RSA_CONTENT found, attempting to decode..."
  if echo "${RSA_CONTENT}" | base64 -d | tar zxf -; then
     export RSA_KEY_FILENAME=${PWD}/rsa_key
  else
     echo "error: Failed to either decode base64 or untar decoded contents."
     echo "error: Run './tools/generate-rsakey ${DEPLOY_METHOD}' on your manchine"
     exit 1
  fi
fi

# Do some checks if the database is there
if [[ -z "${DATABASE_URL}" ]]; then
  echo "error: DATABASE_URL is undefined, thus the server will not start. To continue, add an DATABASE_URL"
  echo "error: secret on your PaaS service. If you're running locally, please setup an Postgres instance in"
  echo "error: your Docker Compose config."
  exit 1
fi

if [[ "${I_REALLY_WANT_VOLATILE_STORAGE}" == "true" ]]; then
  true
elif [[ "${I_REALLY_WANT_VOLATILE_STORAGE}" != "true" ]] && [[ "${SAFETY_LOCK_CODE}" == "$(cat /etc/safety-lock/datadir/code.txt)" ]]; then
  echo "error: To avoid data loss, either setup an container volume for the data directory or"
  echo "error: set I_REALLY_WANT_VOLATILE_STORAGE to true, assuming you know what you're doing."
  echo "error: In meanwhile, use the following code below to disarm the safety lock (this is a bit insecure"
  echo "error: but we know it) error: until we worked on Docker volume detection in the startup script."
  echo "error:     SAFETY_LOCK_CODE=$(cat /etc/safety-lock/datadir/code.txt)"
  exit 1
fi

echo "==> Checks done, starting up..."
/bin/sh /start.sh
